/*!	Transform BPMN-XML to SpecIF
    - Parse the BPMN-XML file
	- Extract both model-elements and semantic relations in SpecIF Format
	- Model elements with same type and title are NOT consolidated by this transformation
	- Reference: https://docs.camunda.org/stable/api-references/bpmn20/
	
	(C)copyright adesso SE (http://adesso.de) and enso managers gmbh (http://enso-managers.de)
	Author: Robert.Kanitz@adesso.de and se@enso-managers.de
	License and terms of use: Apache 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
	We appreciate any correction, comment or contribution as Github issue (https://github.com/enso-managers/SpecIF-Tools/issues) 
*/
function BPMN2Specif(e,t){"use strict";const s="RC-SpecifView",a="RC-Actor",i="RC-State",r="RC-Event",o="RC-Collection",n="RC-Folder";if("object"!=typeof t||!t.imgName)return null;let c=Object.assign({modified:(new Date).toISOString(),titleLength:96,textLength:8192,imgMime:"application/bpmn+xml",strNamespace:"bpmn:",modelElementClasses:[a,i,r,o],strRoleType:"SpecIF:Role",strConditionType:"SpecIF:Condition",strBusinessProcessType:"SpecIF:BusinessProcess",strBusinessProcessesType:"SpecIF:BusinessProcesses",strFolderType:"SpecIF:Heading",strDiagramType:"SpecIF:View",strBusinessProcessFolder:"SpecIF:BusinessProcesses",strNotation:"BPMN 2.0 Process Diagram",strJoinExcGateway:"Joining Exclusive Gateway",strJoinExcGatewayDesc:"Wait for any *one* incoming branch to continue.",strJoinParGateway:"Joining Parallel Gateway",strJoinParGatewayDesc:"Wait for *all* incoming branches to continue.",strJoinIncGateway:"Joining Inclusive Gateway",strJoinIncGatewayDesc:"Wait for *all active* incoming branches to continue.",strForkEvtGateway:"Forking (exclusive) Event Gateway",strForkEvtGatewayDesc:"The first of the following events to occur will prevail.",strForkExcGateway:"Forking Exclusive Gateway",strForkExcGatewayDesc:"Evaluate the condition and signal the respective event.",strForkParGateway:"Forking Parallel Gateway",strForkParGatewayDesc:"Forward control to *all* outgoing branches.",strForkIncGateway:"Forking Inclusive Gateway",strForkIncGatewayDesc:"Evaluate all conditions and signal the respective events.",strTextAnnotation:"Text Annotation"},t);var d=(new DOMParser).parseFromString(e,"text/xml");let l=Array.from(d.querySelectorAll("collaboration"));if(l.length<1)return void console.error("BPMN Import: BPMN-XML has no collaboration.");l.length>1&&console.warn("BPMN Import: BPMN-XML has more than one collaboration.");var p={};p.id=l[0].getAttribute("id"),p.$schema="https://specif.de/v1.0/schema.json",p.title=v(c.title||c.imgName.split(".")[0]||l[0].nodeName+' "'+p.id+'"',c.titleLength,"Name of model"),p.dataTypes=[{id:"DT-ShortString",title:"String ["+c.titleLength+"]",description:"String with max. length "+c.titleLength,revision:"1",type:"xs:string",maxLength:c.titleLength,changedAt:"2016-05-26T08:59:00+02:00"},{id:"DT-Text",title:"Plain or formatted Text",description:"A text string, plain, or formatted with XHTML or markdown",revision:"1.1",replaces:["1"],type:"xs:string",changedAt:"2021-02-14T08:59:00+02:00"}],p.propertyClasses=[{id:"PC-Name",title:"dcterms:title",dataType:"DT-ShortString",changedAt:"2016-05-26T08:59:00+02:00"},{id:"PC-Description",title:"dcterms:description",dataType:"DT-Text",changedAt:"2016-05-26T08:59:00+02:00"},{id:"PC-Diagram",title:"SpecIF:Diagram",dataType:"DT-Text",changedAt:"2016-05-26T08:59:00+02:00"},{id:"PC-Notation",title:"SpecIF:Notation",dataType:"DT-ShortString",changedAt:"2016-05-26T08:59:00+02:00"},{id:"PC-Type",title:"dcterms:type",dataType:"DT-ShortString",changedAt:"2016-05-26T08:59:00+02:00"}],p.resourceClasses=[{id:s,title:c.strDiagramType,description:"A 'View' is a graphical model view with a specific communication purpose, e.g. a business process or system composition.",instantiation:["user"],propertyClasses:["PC-Name","PC-Diagram","PC-Description","PC-Type","PC-Notation"],icon:"&#9635;",changedAt:c.modified},{id:a,title:"FMC:Actor",description:"An 'Actor' is a fundamental model element type representing an active entity, be it an activity, a process step, a function, a system component or a role.",instantiation:["auto"],propertyClasses:["PC-Name","PC-Description","PC-Type"],icon:"&#9632;",changedAt:c.modified},{id:i,title:"FMC:State",description:"A 'State' is a fundamental model element type representing a passive entity, be it a value, a condition, an information storage or even a physical shape.",instantiation:["auto"],propertyClasses:["PC-Name","PC-Description","PC-Type"],icon:"&#9679;",changedAt:c.modified},{id:r,title:"FMC:Event",description:"An 'Event' is a fundamental model element type representing a time reference, a change in condition/value or more generally a synchronisation primitive.",instantiation:["auto"],propertyClasses:["PC-Name","PC-Description","PC-Type"],icon:"&#11047;",changedAt:c.modified},{id:o,title:"SpecIF:Collection",instantiation:["auto"],description:"A 'Collection' is an arbitrary group of resources linked with a SpecIF:contains statement. It corresponds to a 'Group' in BPMN Diagrams.",propertyClasses:["PC-Name","PC-Description","PC-Type"],icon:"&#11034;",changedAt:c.modified},{id:n,title:c.strFolderType,description:"Folder with title and text for chapters or descriptive paragraphs.",isHeading:!0,instantiation:["auto","user"],propertyClasses:["PC-Name","PC-Description","PC-Type"],changedAt:c.modified},{id:"RC-Note",title:"SpecIF:Note",description:"A 'Note' is additional information by the author referring to any resource.",propertyClasses:["PC-Name","PC-Description"],changedAt:c.modified}],p.statementClasses=[{id:"SC-shows",title:"SpecIF:shows",description:"Statement: Plan shows Model-Element",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:[s],changedAt:c.modified},{id:"SC-contains",title:"SpecIF:contains",description:"Statement: Model-Element contains Model-Element",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:c.modelElementClasses,objectClasses:c.modelElementClasses,changedAt:c.modified},{id:"SC-writes",title:"SpecIF:writes",description:"Statement: Actor (Role, Function) writes State (Information)",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:[a,r],objectClasses:[i],changedAt:c.modified},{id:"SC-reads",title:"SpecIF:reads",description:"Statement: Actor (Role, Function) reads State (Information)",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:[a,r],objectClasses:[i],changedAt:c.modified},{id:"SC-precedes",title:"SpecIF:precedes",description:"A FMC:Actor 'precedes' a FMC:Actor; e.g. in a business process or activity flow.",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:[a,r],objectClasses:[a,r],changedAt:c.modified},{id:"SC-refersTo",title:"SpecIF:refersTo",description:"A SpecIF:Comment, SpecIF:Note or SpecIF:Issue 'refers to' any other resource.",instantiation:["auto"],propertyClasses:["PC-Type"],subjectClasses:["RC-Note"],objectClasses:[s].concat(c.modelElementClasses),changedAt:c.modified}],p.statements=[],p.files=[];const u=S(p.id),m="D-"+u,g='<object data="'+c.imgName+'" type="'+c.imgMime+'" >'+c.imgName+"</object>";p.resources=[{id:"FolderProcesses-"+u,class:n,title:c.strBusinessProcessFolder,properties:[{class:"PC-Type",value:c.strBusinessProcessesType}],changedAt:c.modified}],p.resources.push({id:m,title:p.title,class:s,properties:[{class:"PC-Diagram",value:'<div><p class="inline-label">Model View:</p><p>'+g+"</p></div>"},{class:"PC-Type",value:c.strBusinessProcessType},{class:"PC-Notation",value:c.strNotation}],changedAt:c.modified}),Array.from(l[0].childNodes,(e=>{if(!e.tagName)return;let t,s=P(e.tagName);switch(s){case"documentation":return t=N(p.resources,m),void(t&&e.innerHTML&&t.properties.push({class:"PC-Description",value:v(e.innerHTML,c.textLength,"Documentation of collaboration")}));case"group":let a,i=e.getAttribute("categoryValueRef");return Array.from(d.querySelectorAll("categoryValue"),(e=>{e.getAttribute("id")==i&&(a=e.getAttribute("value"))})),void p.resources.push({id:e.getAttribute("id"),title:a,class:o,properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified});case"participant":t={id:e.getAttribute("id"),process:e.getAttribute("processRef"),title:v(e.getAttribute("name")||s+"_"+S(e.getAttribute("id")),c.titleLength,"Name of participant"),class:"RC-Actor",properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified};break;case"messageFlow":let r=e.getAttribute("id"),n=e.getAttribute("sourceRef"),l=e.getAttribute("targetRef");t={id:r,title:v(e.getAttribute("name")||s+"_"+S(r),c.titleLength,"Name of message-flow between participants"),class:"RC-State",properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified},p.statements.push({id:"S-"+S("SpecIF:writes"+n+r),class:"SC-writes",subject:n,object:r,properties:[{class:"PC-Type",value:c.strNamespace+"dataOutputAssociation"}],changedAt:c.modified}),p.statements.push({id:"S-"+S("SpecIF:reads"+l+r),class:"SC-reads",subject:l,object:r,properties:[{class:"PC-Type",value:c.strNamespace+"dataInputAssociation"}],changedAt:c.modified});break;default:return void console.info("BPMN Import: Skipping tag "+s+".")}if(!t)throw Error("Programming Error in BPMN2Specif: Resource should be defined ...");Array.from(e.childNodes,(e=>{e.nodeName.includes("documentation")&&t&&e.innerHTML&&t.properties.push({class:"PC-Description",value:v(e.innerHTML,c.textLength,"Documentation of "+(t.class==a?"participant":"message flow")+" with id "+t.id)})})),p.resources.push(t)}));let h=[],f=[];function y(e){let t=N(p.resources,e);if(t)return t;console.error("BPMN Import: Did not find a resource with id '"+e+"'.")}Array.from(d.querySelectorAll("process"),(function e(t){let s,o,n,d,l=t.getAttribute("id"),g=p.resources.find((e=>e.process==l)),b=Array.from(t.childNodes);function A(e,t){if(e.nodeName.includes("lane")){let s=e.getAttribute("id"),a=v(e.getAttribute("name"),c.titleLength,"Name of lane with id "+s);if(a){let i={id:s,title:a,class:"RC-Actor",properties:[{class:"PC-Type",value:c.strRoleType}],changedAt:c.modified};T(t,s,m),Array.from(e.childNodes,(e=>{e.nodeName.includes("documentation")&&i.properties.unshift({class:"PC-Description",value:v(e.innerHTML,c.textLength,"Documentation of lane id "+s)}),e.nodeName.includes("flowNodeRef")&&h.push({class:"SC-contains",subject:s,object:e.innerHTML}),e.nodeName.includes("childLaneSet")&&Array.from(e.childNodes,(e=>{A(e,s)}))})),p.resources.push(i)}}}function C(e){Array.from(e.childNodes,(e=>{e.tagName&&(e.tagName.includes("dataInputAssociation")?Array.from(e.childNodes,(t=>{if(t.tagName&&t.tagName.includes("sourceRef")){let s=y(t.innerHTML);s?p.statements.push({id:e.getAttribute("id"),class:"SC-reads",subject:o,object:s.id,properties:[{class:"PC-Type",value:c.strNamespace+"dataInputAssociation"}],changedAt:c.modified}):console.error("BPMN Import: Did not find a dataStore or dataObject with id '"+dSId+"'.")}})):e.tagName.includes("dataOutputAssociation")&&Array.from(e.childNodes,(t=>{if(t.tagName&&t.tagName.includes("targetRef")){let s=y(t.innerHTML);s?p.statements.push({id:e.getAttribute("id"),class:"SC-writes",subject:o,object:s.id,properties:[{class:"PC-Type",value:c.strNamespace+"dataOutputAssociation"}],changedAt:c.modified}):console.error("BPMN Import: Did not find a dataStore or dataObject with id '"+dSId+"'.")}})))}))}b.forEach((e=>{if(e.tagName)switch(o=e.getAttribute("id"),n=e.getAttribute("name"),d="",Array.from(e.childNodes,(e=>{"documentation"==P(e.tagName)&&e.innerHTML&&(d=e.innerHTML)})),s=P(e.nodeName),s){case"laneSet":Array.from(e.childNodes,(e=>{A(e,g.id)}));break;case"dataObjectReference":case"dataStoreReference":s="dataStoreReference"==s?"dataStore":"dataObject";let t={id:o,title:v(n||s+("dataObject"==s?"_"+u:""),c.titleLength,"Name of "+s+" with id "+o),class:i,properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified};d&&t.properties.unshift({class:"PC-Description",value:v(d,c.textLength,"Documentation of "+s+" with id "+o)}),p.resources.push(t)}})),b.forEach((t=>{if(!t.tagName)return;s=P(t.tagName),o=t.getAttribute("id"),n=t.getAttribute("name")||"",d="",Array.from(t.childNodes,(e=>{"documentation"==P(e.tagName)&&e.innerHTML&&(d=e.innerHTML)}));let i,l=!1;switch(s){case"laneSet":case"dataObjectReference":case"dataStoreReference":case"dataObject":case"dataStore":case"sequenceFlow":case"association":return;case"task":case"manualTask":case"userTask":case"scriptTask":case"serviceTask":case"sendTask":case"receiveTask":case"callActivity":case"transaction":case"subProcess":let u={id:o,title:v(n||s+"_"+S(o),c.titleLength,"Name of "+s+" with id "+o),class:a,properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified};d&&u.properties.unshift({class:"PC-Description",value:v(d,c.textLength,"Documentation of "+s+" with id "+o)}),"subProcess"==s&&(u.process=o),p.resources.push(u),"subProcess"==s&&e(t),C(t),l=!0;break;case"startEvent":case"intermediateThrowEvent":case"intermediateCatchEvent":case"endEvent":case"boundaryEvent":p.resources.push({id:o,title:v(n||s,c.titleLength,"Name of "+s+" with id "+o),class:r,properties:[{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified}),d&&p.resources[p.resources.length-1].properties.unshift({class:"PC-Description",value:v(d,c.textLength,"Documentation of "+s+" with id "+o)}),C(t),l=!0;break;case"parallelGateway":case"exclusiveGateway":case"inclusiveGateway":case"eventBasedGateway":if(i={id:o,class:s,incoming:[],outgoing:[]},Array.from(t.childNodes,(e=>{e.tagName&&(e.tagName.includes("incoming")&&i.incoming.push(e.innerHTML),e.tagName.includes("outgoing")&&i.outgoing.push(e.innerHTML))})),i.incoming.length>1&&i.outgoing.length>1)return void console.warn("BPMN Import: Gateway with id ',id,' has multiple incoming AND multiple outgoing paths!");if(1==i.incoming.length&&1==i.outgoing.length)return void console.warn("BPMN Import: Gateway with id ',id,' has one incoming AND one outgoing path!");if(1==i.outgoing.length)switch(s){case"parallelGateway":n=c.strJoinParGateway,d=c.strJoinParGatewayDesc;break;case"exclusiveGateway":n=c.strJoinExcGateway,d=c.strJoinExcGatewayDesc;break;case"inclusiveGateway":n=c.strJoinIncGateway,d=c.strJoinIncGatewayDesc}else switch(s){case"parallelGateway":n=c.strForkParGateway,d=c.strForkParGatewayDesc;break;case"eventBasedGateway":n=c.strForkEvtGateway,d=c.strForkEvtGatewayDesc;break;case"exclusiveGateway":n=c.strForkExcGateway+(n?": "+n:""),d=c.strForkExcGatewayDesc,i.title=n,f.push(i);break;case"inclusiveGateway":n=c.strForkIncGateway+(n?": "+n:""),d=c.strForkIncGatewayDesc,i.title=n,f.push(i)}p.resources.push({id:o,title:v(n,c.titleLength,"Name of gateway with id "+o),class:a,properties:[{class:"PC-Description",value:v(d,c.textLength,"Documentation of gateway with id "+o)},{class:"PC-Type",value:c.strNamespace+s}],changedAt:c.modified});break;case"textAnnotation":break;default:console.warn("BPMN Import: Skipping BPMN element with tag ",s," and title ",n,".")}if(l){let e=h.filter((e=>e.object==o));e.forEach((e=>{T(e.subject,o,m)})),e.length<1&&g&&T(g.id,o,m)}}))})),Array.from(d.querySelectorAll("sequenceFlow"),(e=>{let t,s=e.getAttribute("id"),i=e.getAttribute("name"),o=P(e.tagName),n=N(f,e.getAttribute("sourceRef"));if(n&&i){t={subject:n,object:N(p.resources,e.getAttribute("targetRef"))};let a={id:s,title:v(i,c.titleLength,"Name of sequence flow with id "+s),class:r,properties:[{class:"PC-Type",value:c.strConditionType}],changedAt:c.modified};return t.subject.title&&a.properties.unshift({class:"PC-Description",value:v(t.subject.title+" → "+i,c.textLength,"Documentation of sequence flow with id "+s)}),p.resources.push(a),p.statements.push({id:s+"-s",class:"SC-precedes",subject:t.subject.id,object:s,properties:[{class:"PC-Type",value:c.strConditionType}],changedAt:c.modified}),void p.statements.push({id:s+"-t",class:"SC-precedes",subject:s,object:t.object.id,properties:[{class:"PC-Type",value:c.strConditionType}],changedAt:c.modified})}t={subject:N(p.resources,e.getAttribute("sourceRef")),object:N(p.resources,e.getAttribute("targetRef"))},"RC-Actor"!=t.subject.class||"RC-Actor"!=t.object.class?([a,r].includes(t.subject.class)&&t.object.class,p.statements.push({id:s,class:"SC-precedes",subject:t.subject.id,object:t.object.id,properties:[{class:"PC-Type",value:c.strNamespace+o}],changedAt:c.modified})):p.statements.push({id:s,class:"SC-precedes",subject:t.subject.id,object:t.object.id,properties:[{class:"PC-Type",value:c.strNamespace+o}],changedAt:c.modified})}));let b=[];Array.from(d.querySelectorAll("textAnnotation"),(e=>{let t=b.length+1,s=e.getAttribute("id");Array.from(e.childNodes,(e=>{e.tagName&&e.tagName.includes("text")&&e.innerHTML&&(p.resources.push({id:s,title:c.strTextAnnotation+(t>9?" "+t:" 0"+t),class:"RC-Note",properties:[{class:"PC-Description",value:v(e.innerHTML,c.textLength,"Annotation with id "+s)}],changedAt:c.modified}),b.push(s))}))})),Array.from(d.querySelectorAll("association"),(e=>{let t=e.getAttribute("id"),s=y(e.getAttribute("targetRef")),a=y(e.getAttribute("sourceRef"));s&&a?p.statements.push({id:t,class:"SC-refersTo",subject:s.id,object:a.id,changedAt:c.modified}):console.warn("BPMN Import: Skipping association "+t+", because either the source or more probably the target is missing")}));let A=Array.from(d.querySelectorAll("BPMNShape"),(e=>{let t,s=e.getAttribute("bpmnElement");return Array.from(e.children,(e=>{e.tagName&&e.tagName.includes("Bounds")&&(t=e)})),t?{ref:s,type:function(e){let t=N(p.resources,e);if(t)for(var s of t.properties)if("PC-Type"==s.class)return P(s.value)}(s),x:parseInt(t.getAttribute("x")),y:parseInt(t.getAttribute("y")),w:parseInt(t.getAttribute("width")),h:parseInt(t.getAttribute("height"))}:void 0}));for(var C of A)if("group"==C.type)for(var w of A)"group"!=w.type&&(C.x+1>w.x&&C.y+1>w.y&&C.x+C.w<w.x+w.w+1&&C.y+C.h<w.y+w.h+1?T(w.ref,C.ref,m):C.x<w.x+1&&C.y<w.y+1&&C.x+C.w+1>w.x+w.w&&C.y+C.h+1>w.y+w.h&&T(C.ref,w.ref,m));return p.statements.forEach((e=>{p.statements.push({id:p.id+"-shows-"+e.id,class:"SC-shows",subject:m,object:e.id,changedAt:c.modified})})),p.resources.forEach((e=>{c.modelElementClasses.includes(e.class)&&p.statements.push({id:p.id+"-shows-"+e.id,class:"SC-shows",subject:m,object:e.id,changedAt:c.modified})})),p.hierarchies=function(e){let t=[{id:"H-FolderProcesses-"+u,resource:"FolderProcesses-"+u,nodes:[{id:"N-"+m,resource:m,nodes:[],changedAt:c.modified}],changedAt:c.modified}];return b.forEach((e=>{t[0].nodes[0].nodes.push({id:j("N-"),resource:e,changedAt:c.modified})})),t}(p.resources),p;function N(e,t){if(e&&t)for(var s of(t=t.trim(),e))if(s.id==t)return s}function P(e){return e?e.split(":").pop():""}function v(e,t,s){return e&&e.length>t?(console.warn("BPMN Import: "+s+" has been truncated because it is too long"),e.slice(0,t)):e}function T(e,t,s){!function(e){for(var t of p.statements)if(t.class==e.class&&(t.subject==e.subject&&t.object==e.object||t.subject==e.object&&t.object==e.subject))return!1;p.statements.push(e)}({id:"S-"+S("SC-contains"+e+t),class:"SC-contains",subject:e,object:t,changedAt:c.modified})}function S(e){for(var t=0,s=0;s<e.length;s++)t=(t<<5)-t+e.charCodeAt(s),t&=t;return t}function j(e){!e||e.length<1?e="ID_":/^[A-Za-z_]/.test(e)||(e="_"+e);const t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";let s="";for(var a=27;a>0;--a)s+=t[Math.round(61*Math.random())];return e+s}}